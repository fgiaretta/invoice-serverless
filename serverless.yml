service: invoices-serverless

frameworkVersion: "3"

plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs18.x
  environment:
    DYNAMODB_TABLE: invoices
    COGNITO_USER_POOL_ID: { Ref: CognitoUserPool }
    COGNITO_CLIENT_ID: { Ref: CognitoUserPoolClient }
    SNS_TOPIC_ARN_NOTIFY_USERS: !Ref SNSNotifyUsersInvoices
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - sns:Publish # add SNS publish permission
          Resource:
            - "arn:aws:dynamodb:us-east-1:*:table/invoices"
            - "arn:aws:sns:us-east-1:*:*" # add SNS resource

        - Effect: Allow
          Action:
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
          Resource: "*"

functions:
  login:
    handler: user/login.handler
    events:
      - http:
          path: user/login
          method: post
          cors: true

  confirm:
    handler: user/confirm.handler
    events:
      - http:
          path: user/confirm
          method: post
          cors: true

  signup:
    handler: user/signup.handler
    events:
      - http:
          path: user/signup
          method: post
          cors: true

  create:
    handler: invoices/api/create.create
    events:
      - http:
          path: invoices
          method: post
          cors: true
          authorizer:
            name: authorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
            claims:
              - email

  list:
    handler: invoices/api/list.list
    events:
      - http:
          path: invoices
          method: get
          cors: true
          authorizer:
            name: authorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
            claims:
              - email

  get:
    handler: invoices/api/get.get
    events:
      - http:
          path: invoices/{id}
          method: get
          cors: true
          authorizer:
            name: authorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
            claims:
              - email

  update:
    handler: invoices/api/update.update
    events:
      - http:
          path: invoices/{id}
          method: put
          cors: true
          authorizer:
            name: authorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
            claims:
              - email

  delete:
    handler: invoices/api/delete.delete
    events:
      - http:
          path: invoices/{id}
          method: delete
          cors: true
          authorizer:
            name: authorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn
            claims:
              - email

resources:
  Resources:
    DynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      # DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: user-pool
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
    
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: user-pool-client
        UserPoolId:
          Ref: CognitoUserPool
        GenerateSecret: false
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
          - USER_PASSWORD_AUTH

    SNSNotifyUsersInvoices:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: "Notify users"
        TopicName: "sns-topic-notify-users-invoices"
        
  Outputs:
    SNSNotifyUsersInvoicesArn:
      Value: !Ref SNSNotifyUsersInvoices
